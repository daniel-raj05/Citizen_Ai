# -*- coding: utf-8 -*-
"""NM_PRO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-N3ymbFOJSE7b8gbkH1GL8VGomKYooG2
"""

!pip install --upgrade gradio

!pip install --upgrade gradio transformers torch --quiet

# =============================
# üöÄ Colab: Futuristic City & Citizen AI
# =============================

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# -----------------------------
# Load Model & Tokenizer
# -----------------------------
# Replace with smaller model for speed: "microsoft/phi-2"
model_name = "ibm-granite/granite-3.2-2b-instruct"

tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# -----------------------------
# Response Generator
# -----------------------------
def generate_response(prompt, max_length=300):
    """Generate response from model"""
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=256)

    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=1.0,
            do_sample=False,
            pad_token_id=tokenizer.eos_token_id
        )

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

# -----------------------------
# City Analysis Function
# -----------------------------
def city_analysis(city_name):
    prompt = f"""
    Provide a detailed analysis of {city_name} including:
    1. Crime Index and safety statistics
    2. Accident rates and traffic safety information
    3. Overall safety assessment

    City: {city_name}
    Analysis:
    """
    return generate_response(prompt, max_length=400)

# -----------------------------
# Citizen Interaction Function
# -----------------------------
def citizen_interaction(query):
    prompt = f"""
    As a government assistant, provide accurate and helpful information
    about the following citizen query related to public services,
    government policies, or civic issues:

    Query: {query}
    Response:
    """
    return generate_response(prompt, max_length=400)

# -----------------------------
# Gradio Futuristic Techy UI
# -----------------------------
with gr.Blocks(css="""
    body {
        background: linear-gradient(135deg, #0f2027, #203a43, #2c5364);
        font-family: 'Segoe UI', sans-serif;
        color: #e0f2fe;
    }
    .gradio-container {max-width: 950px; margin: auto;}
    h1 {
        text-align: center;
        font-size: 2.2em;
        background: linear-gradient(90deg, #06b6d4, #3b82f6, #9333ea);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        font-weight: bold;
    }
    .card {
        background: rgba(255, 255, 255, 0.08);
        border: 1px solid rgba(255, 255, 255, 0.2);
        border-radius: 16px;
        padding: 20px;
        backdrop-filter: blur(10px);
        box-shadow: 0 8px 32px rgba(0,0,0,0.5);
        margin-top: 10px;
    }
    textarea, input {
        background: rgba(15, 23, 42, 0.8) !important;
        color: #f8fafc !important;
        border-radius: 12px !important;
        border: 1px solid rgba(255,255,255,0.2) !important;
    }
    button {
        background: linear-gradient(90deg, #06b6d4, #3b82f6, #9333ea) !important;
        color: white !important;
        font-weight: bold !important;
        border-radius: 12px !important;
        padding: 10px 18px !important;
        box-shadow: 0 0 15px rgba(6,182,212,0.8);
        transition: 0.3s;
    }
    button:hover {
        transform: scale(1.05);
        box-shadow: 0 0 20px rgba(147,51,234,1);
    }
""") as app:

    gr.Markdown("# üåå Futuristic City & Citizen AI Assistant")

    with gr.Tabs():
        with gr.Tab("üèôÔ∏è City Analysis"):
            with gr.Column(elem_classes="card"):
                gr.Markdown("### üîé Enter a city name to analyze safety & accident stats")
                city_input = gr.Textbox(
                    label="City Name",
                    placeholder="e.g., New York, London, Mumbai...",
                    lines=1
                )
                analyze_btn = gr.Button("Analyze City üöÄ")
                city_output = gr.Textbox(
                    label="City Analysis",
                    lines=12,
                    placeholder="Results will appear here..."
                )
                analyze_btn.click(city_analysis, inputs=city_input, outputs=city_output)

        with gr.Tab("üèõÔ∏è Citizen Services"):
            with gr.Column(elem_classes="card"):
                gr.Markdown("### üí° Ask about public services, policies, or civic issues")
                citizen_query = gr.Textbox(
                    label="Your Query",
                    placeholder="Ask about healthcare, transport, government policies...",
                    lines=3
                )
                query_btn = gr.Button("Get Information ‚ö°")
                citizen_output = gr.Textbox(
                    label="Government Response",
                    lines=12,
                    placeholder="Response will appear here..."
                )
                query_btn.click(citizen_interaction, inputs=citizen_query, outputs=citizen_output)

# -----------------------------
# Launch App
# -----------------------------
app.launch(share=True)